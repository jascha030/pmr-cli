#!/usr/bin/env php
<?php

declare(strict_types=1);

use Jascha030\PM\Console\Command\InitCommand;
use Jascha030\PM\Console\Command\OpenCommand;
use Jascha030\PM\Project\UrlResource;
use Jascha030\PM\Service\ResourceService;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Output\ConsoleOutput;

/**
 * Resolve autoloader
 *
 * @return string
 */
$autoloader = static function () {
    $locations = [
        dirname(__FILE__, 2) . '/vendor/autoload.php',
        dirname(__FILE__, 4) . '/autoload.php',
        getenv('HOME') . '/.composer/vendor/autoload.php',
    ];

    foreach ($locations as $autoloaderPath) {
        if (is_file($autoloaderPath)) {
            return $autoloaderPath;
        }
    }

    $errorMsg = sprintf('Couldn\'t find Composer\'s Autoloader file in any of the following paths: 
                %s, please make sure you run the %s or %s commands.',
        implode(', ', $locations),
        '<pre>composer install --prefer-source</pre>',
        '<pre>composer dump-autoload</pre>');

    throw new \RuntimeException($errorMsg);
};

/**
 * Require autoloader
 */
require $autoloader();

/**
 * Create console app
 */
$app = new Application('PM Resource CLI', '1.0.0');

$types = [
    UrlResource::getType() => UrlResource::class
];

$service = new ResourceService($types);

$app->add(new InitCommand($service, 'init'));
$app->add(new OpenCommand($service));

try {
    $app->run();
} catch (Exception $e) {
    (new ConsoleOutput())->writeln($e->getMessage());

    return Command::FAILURE;
}
